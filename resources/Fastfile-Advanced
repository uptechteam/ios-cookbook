import("custom_slack_upload.rb") # needed for post_zip, remove if not used

default_platform(:ios)

# helper properties
APPNAME = "your_project_name"
XCODEPROJ = "#{APPNAME}.xcodeproj"

platform :ios do
  # MARK: - Set up
  
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "5"
  end

  # if SwftLint is used on the project
  desc "Run's SwiftLint"
  lane :lint do
    swiftlint_executable = mint_which(package: "swiftlint")

    UI.user_error!("SwiftLint not found. Please install SwiftLint using Mint.") if swiftlint_executable.empty?

    swiftlint(
      executable: swiftlint_executable,
      strict: true,
      quiet: true,
      reporter: "emoji"
    )
  end

  # use this for projects without tests
  desc "Build project"
  lane :build do |options|
    setup_ci if ENV['CI']
    scheme = get_scheme(build_configuration: options[:build_configuration])
    match(type: "development", readonly: true)
    build_app(
      scheme: scheme,
      silent: true,
      skip_archive: true,
      skip_profile_detection: true
    )
  end

  # use tis for projects with tests
  desc "Runs all the tests"
  lane :test do |options|
    setup_ci if ENV['CI']
    scheme = get_scheme(build_configuration: options[:build_configuration])
    match(type: "development", readonly: true)
    scan(scheme: scheme)
  end

  desc "Deploy given scheme to TestFlight"
  lane :deploy do |options|
    setup_ci if ENV['CI']
    # Fetch provisioning profiles
    match_all

    # Bump build number before the build
    build_number = get_build_number(xcodeproj: XCODEPROJ).to_i + 1
    increment_build_number(build_number: build_number)

    # Build the project with given scheme
    build_configuration = options[:build_configuration]
    scheme = get_scheme(build_configuration: build_configuration)
    build_app(
      scheme: scheme,
      silent: true,
      export_method: "app-store"
    )

    # Upload the build
    app_store_connect_api_key
    upload_to_testflight(
      username: "your_email_for_appleID@uptech.com", # can be stored in secrets if preferred
      skip_waiting_for_build_processing: true
    )

    # Commit bump build number, add a tag and push
    commit_version_bump(
      force: true,
      message: "Bump build number #{build_number} [ci skip]"
    )
    push_to_git_remote

    version = get_version_number(
      xcodeproj: XCODEPROJ,
      target: APPNAME
    )
    add_git_tag(
      tag: "#{build_configuration}/v#{version}/#{build_number}"
    )
    push_git_tags
    sendDSYM # can be removed if Sentry is not used
  end

  # creates zip archive with .ipa file. needed if Slack integration is setup
  desc "Zip .ipa file"
  lane :create_zip do |options|
    scheme = get_scheme(build_configuration: options[:build_configuration])

    version = get_version_number(
      xcodeproj: XCODEPROJ,
      target: APPNAME
    )
    build_number = get_build_number(xcodeproj: XCODEPROJ)

    zip_name = "#{APPNAME} #{scheme} v#{version}(#{build_number}).zip"

    zip(
        path: "#{APPNAME}.ipa",
        output_path: "fastlane/#{zip_name}"
    )
  end

  desc "Post zip to slack"
  lane :post_zip do
    SLACK_API_TOKEN = ENV['SLACK_API_TOKEN']
    zip_files = Dir.glob("*.zip")

    if zip_files.empty?
      UI.user_error!("No zip files found.")
    else
      zip_file_path = zip_files.first
      zip_name = File.basename(zip_file_path)

      zip_path = File.expand_path(zip_name)

      my_file_upload_to_slack(
        initial_comment: "Latest #{APPNAME} build",
        file_path: zip_path,
        channels: "C0000000000", # channel ID where zip should be posted. can be stored in secrets if preferred
        api_token: SLACK_API_TOKEN
      )
    end
  end

  desc "Match all app_identifier/type combinations"
  private_lane :match_all do
    match(
      type: "development",
      readonly: true
    )

    match(
      type: "appstore",
      readonly: true
    )
  end

  desc "Sends dSYM file to Sentry"
  private_lane :sendDSYM do
  org_slug = ENV['SENTRY_ORG_SLUG'] # name of organization in Sentry. if not added to secrets you can add it here directly
  project_slug = ENV['SENTRY_PROJECT_SLUG'] # name of project in Sentry. if not added to secrets you can add it here directly
  sentry_debug_files_upload(
    org_slug: org_slug,
    project_slug: project_slug,
    include_sources: true
  )
  end

  # helper lane to convert environment to scheme in project, if needed. adjust for your need (add/remove/rename schemes)
  desc "Get project scheme (dev, staging or prod)"
  private_lane :get_scheme do |options|
    build_configuration = options[:build_configuration]
    if !build_configuration 
      UI.build_failure!("No build configuration was passed!")
    end

    case build_configuration
    when "development"
      "Development"
    when "staging"
      "Staging"
    when "production"
      "Production"
    else
      UI.build_failure!("Couldn't recognize passed build configuration!")
    end
  end
end
